{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/TodosPage.tsx","pages/AboutPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","href","to","TodoForm","onAdd","ref","useRef","onKeyPress","event","key","current","value","type","id","placeholder","htmlFor","TodoList","todos","onRemove","onToggle","length","map","todo","completed","checked","onChange","bind","title","onClick","preventDefault","removeHandler","TodosPage","useState","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","prev","confirm","filter","AboutPage","history","useHistory","push","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0802f8a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper grey darken-4 px1\">\r\n                <a href=\"/\" className=\"brand-logo\">React + TypeScript</a>\r\n                <ul className=\"right hide-on-med-and-down\">\r\n                    <li>\r\n                        <NavLink to=\"/\">Список дел</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to=\"/about\">Инвормация</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n};","import React, {useRef, useState} from \"react\";\r\n\r\ninterface TodoFormProps {\r\n    onAdd(title: string): void\r\n}\r\n\r\n\r\nexport const TodoForm = ({onAdd}: TodoFormProps) => {\r\n    const ref = useRef<HTMLInputElement>(null);\r\n\r\n    const keyPressHandler = (event: React.KeyboardEvent) => {\r\n        if (event.key === \"Enter\") {\r\n            onAdd(ref.current!.value);\r\n            ref.current!.value = \"\";\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"input-field mt2\">\r\n            <input\r\n                onKeyPress={keyPressHandler}\r\n                ref={ref}\r\n                type=\"text\" id=\"title\"\r\n                placeholder=\"Введите название дела\"/>\r\n            <label htmlFor=\"title\" className=\"active\">\r\n                Введите название дела\r\n            </label>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nimport {ITodo} from \"./interfaces\";\r\n\r\ntype TodoListProps = {\r\n    todos: ITodo[],\r\n    onToggle: (id: number) => void,\r\n    onRemove: (id: number) => void\r\n}\r\n\r\nexport const TodoList = ({todos, onRemove, onToggle}: TodoListProps) => {\r\n    if (todos.length === 0) {\r\n        return <p className=\"center\">Пока дел нет</p>\r\n    }\r\n\r\n    const removeHandler = (event: React.MouseEvent, id: number) => {\r\n        event.preventDefault();\r\n        onRemove(id)\r\n    };\r\n\r\n    return (\r\n        <ul>\r\n            {todos.map((todo) =>\r\n                <li key={todo.id} className={todo.completed ? \"todo completed\" : \"todo\"}>\r\n                    <label>\r\n                        <input type=\"checkbox\"\r\n                               checked={todo.completed}\r\n                               onChange={onToggle.bind(null, todo.id)}/>\r\n                        <span>{todo.title}</span>\r\n                        <i className=\"material-icons red-text\"\r\n                           onClick={event => removeHandler(event, todo.id)}>delete</i>\r\n                    </label>\r\n                </li>\r\n            )}\r\n        </ul>\r\n    )\r\n};","import React, {useEffect, useState} from \"react\";\r\n\r\nimport {TodoForm} from \"../components/TodoForm\";\r\nimport {TodoList} from \"../components/TodoList\";\r\n\r\nimport {ITodo} from \"../components/interfaces\";\r\n\r\n\r\ndeclare var confirm: (question: string) => boolean;\r\n\r\nexport const TodosPage = () => {\r\n    const [todos, setTodos] = useState<ITodo[]>([]);\r\n\r\n    useEffect(()=>{\r\n        const saved = JSON.parse(localStorage.getItem(\"todos\") || \"[]\") as ITodo[];\r\n        setTodos(saved)\r\n    }, [])\r\n\r\n    useEffect(()=> {\r\n        localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n    }, [todos])\r\n\r\n    const addHandler = (title: string) => {\r\n        const newTodo: ITodo = {\r\n            title: title,\r\n            id: Date.now(),\r\n            completed: false\r\n        }\r\n        // setTodos([newTodo, ...todos])\r\n        setTodos(prev => [newTodo, ...prev])\r\n    };\r\n\r\n    const toggleHandler = (id: number) => {\r\n        setTodos(prev => prev.map(todo => {\r\n            if (todo.id === id) {\r\n                return {\r\n                    ...todo,\r\n                    completed: !todo.completed\r\n                }\r\n            }\r\n            return todo\r\n        }))\r\n    };\r\n\r\n    const removeHandler = (id: number) => {\r\n        const shouldRemove = confirm(\"Вы уверены?\");\r\n        if(shouldRemove){\r\n            setTodos(prev => prev.filter(todo => todo.id !== id));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TodoForm onAdd={addHandler}/>\r\n            <TodoList todos={todos}\r\n                      onRemove={removeHandler}\r\n                      onToggle={toggleHandler}/>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport const AboutPage = () => {\r\n    const history = useHistory()\r\n    return (\r\n        <>\r\n            <h1>Страница информации</h1>\r\n            <p>Информация.</p>\r\n            <button className=\"btn\" onClick={()=> history.push(\"/\")}>\r\n                Обратно к списку дел\r\n            </button>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport {Switch, Route, HashRouter} from \"react-router-dom\";\n\nimport {Navbar} from \"./components/Navbar\";\nimport {TodosPage} from \"./pages/TodosPage\";\nimport {AboutPage} from \"./pages/AboutPage\";\n\n\nfunction App() {\n    return (\n        <HashRouter>\n            <Navbar/>\n            <div className=\"container\">\n                <Switch>\n                    <Route exact path=\"/\" component={TodosPage}/>\n                    <Route path=\"/about\" component={AboutPage}/>\n                </Switch>\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}